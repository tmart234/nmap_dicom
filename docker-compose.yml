version: '3.7'

services:
  # --- Orthanc Service ---
  # Runs the standard Orthanc server.
  orthanc:
    image: orthancteam/orthanc:latest
    container_name: orthanc_test
    ports:
      - "11112:4242"  # DICOM port (Host:Container)
      - "8042:8042"   # Web UI (Host:Container)
    environment:
      - ORTHANC__NAME=ORTHANC_TEST # This defines its AE Title
      - ORTHANC__DICOM_SERVER_ENABLED=true
      - VERBOSE_ENABLED=true
      - ORTHANC__DICOM_SERVER_ALWAYS_ALLOW_ECHO=true # Allow C-ECHO easily
      # Disable AE Title verification for simplicity in testing C-ECHO
      - ORTHANC__DICOM_SERVER_VERIFY_CALLED_AET=false
      # The following are likely not needed just for C-ECHO but don't hurt
      - ORTHANC__DICOM_SERVER_ALWAYS_ALLOW_FIND=true
      - ORTHANC__DICOM_SERVER_ALWAYS_ALLOW_MOVE=true
      - ORTHANC__DICOM_SERVER_ALWAYS_ALLOW_STORE=true
    volumes:
      - orthanc_db:/var/lib/orthanc/db
    restart: unless-stopped
    healthcheck: # Optional: Check if web UI is up
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8042/app/explorer.html"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- pynetdicom Echo SCP ---
  # Runs a minimal Python SCP using pynetdicom, handles C-ECHO.
  pynetdicom-scp:
    # IMPORTANT: Replace with the actual image you build/host
    # e.g., ghcr.io/your-user/my-pynetdicom-scp:latest OR build locally in workflow
    image: my-pynetdicom-scp:latest
    container_name: pynetdicom_scp_test
    ports:
      # Host Port : Container Port (must match port in pynetdicom_echo_scp.py)
      - "11114:11114"
    restart: unless-stopped
    # AE Title is defined inside the pynetdicom_echo_scp.py script (e.g., PYNETDICOM)
    healthcheck: # Simple check if the port is open inside the container
      test: ["CMD-SHELL", "nc -z localhost 11114 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s # Python script should start fast

# --- dcm4che-tools Echo SCP ---
  dcm4che-scp:
    image: dcm4che/dcm4che-tools:latest
    container_name: dcm4che_scp_test
    # CORRECTED Command (Attempt 2): Try using storescp script, assuming it handles C-ECHO
    command: /opt/dcm4che/bin/storescp -b DCM4CHETOOLS:11115 --accept-unknown
    ports:
      - "11115:11115" # Host Port : Container Port (must match port in command)
    restart: unless-stopped
    healthcheck: # Simple check if the port is open inside the container
      test: ["CMD-SHELL", "nc -z localhost 11115 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give JVM a bit more time

  conquest:
    build:
      context: ./docker/conquest # Directory containing the new Dockerfile
    container_name: conquest_dicom_test
    ports:
      - "5678:5678"
    volumes:
      # Mount volumes for persistent config/data/logs
      # Create these directories locally first if needed
      - ./conquest_test_data/config:/opt/conquest/config
      - ./conquest_test_data/data:/opt/conquest/data
      # - ./conquest_test_data/logs:/opt/conquest/logs # If logs go elsewhere
    restart: unless-stopped
    # Environment variables likely NOT needed now, config is via mounted dicom.ini
    # environment:
    #   - AETITLE=CONQUESTSRV1
    #   - PORT=5678
    healthcheck:
      test: ["CMD-SHELL", "netstat -ltn | grep ':5678' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s # Allow more time for first build + startup

# Only define volumes needed by the services above
volumes:
  orthanc_db: