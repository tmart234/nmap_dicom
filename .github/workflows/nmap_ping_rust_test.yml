name: Nmap Rust DICOM Ping

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  nmap-rust-dicom-ping:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # We need nmap to run dicom-ping, and nc to wait for the port
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap netcat-openbsd

      # Put your custom NSE + nselib in Nmap’s standard path
      - name: Install custom Nmap script & lib
        run: |
          set -euxo pipefail
          sudo mkdir -p /usr/share/nmap/scripts /usr/share/nmap/nselib
          sudo cp scripts/dicom-ping.nse /usr/share/nmap/scripts/
          sudo cp nselib/dicom.lua        /usr/share/nmap/nselib/
          sudo nmap --script-updatedb

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # Build & run a Rust DICOM SCP (dicom-scpproxy) in the background
      - name: Start Rust DICOM SCP
        id: rust_scp
        run: |
          set -euxo pipefail
          PORT=11116

          # Try crates.io first, then fall back to building from GitHub
          if cargo install dicom-scpproxy >/dev/null 2>&1; then
            BIN="$HOME/.cargo/bin/dicom-scpproxy"
          else
            git clone --depth=1 https://github.com/dicom-rs/dicom-scpproxy.git
            cd dicom-scpproxy
            cargo build --release
            BIN="$PWD/target/release/dicom-scpproxy"
          fi

          # Try a few common CLIs so we don't depend on exact flags.
          # Goal: listen on 0.0.0.0:${PORT} and answer C-ECHO.
          (
            "$BIN" --bind 0.0.0.0:${PORT} --echo-only \
            || "$BIN" --bind 0.0.0.0:${PORT} \
            || "$BIN" 0.0.0.0:${PORT}
          ) >/tmp/rust_scp.log 2>&1 &

          echo $! > /tmp/rust_scp.pid

          # Wait for the TCP socket to be open
          for i in {1..60}; do
            if nc -z 127.0.0.1 ${PORT}; then break; fi
            sleep 0.5
          done
          nc -z 127.0.0.1 ${PORT}

          echo "port=${PORT}" >> "$GITHUB_OUTPUT"

      - name: Nmap dicom-ping against Rust SCP
        id: nmap_ping
        run: |
          set -euxo pipefail
          PORT="${{ steps.rust_scp.outputs.port }}"
          OUT="nmap_rust_dicom_ping.txt"

          # Important: tell the NSE which port to treat as DICOM if it isn't 104/11112, etc.
          nmap -p "${PORT}" \
               --script dicom-ping \
               --script-args dicom-ping.ports="${PORT}" \
               localhost | tee "$OUT"

          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      - name: Assert vendor & version are present (prefer dicom-rs)
        run: |
          OUT="${{ steps.nmap_ping.outputs.out }}"
          # Must show both lines
          grep -E '^[|]_?\s*vendor:\s*\S'  "$OUT"
          grep -E '^[|]_?\s*version:\s*\S' "$OUT"

          # Prefer to see dicom-rs (don’t hard-fail if the string differs)
          if grep -Eqi 'vendor:\s*(dicom[-_ ]?rs|rust)' "$OUT"; then
            echo "✓ Vendor looks like dicom-rs"
          else
            echo "::warning::Vendor string wasn’t obviously dicom-rs — printing context:"
            sed -n '1,200p' "$OUT" || true
          fi

      - name: Upload scan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nmap-rust-dicom-ping
          path: ${{ steps.nmap_ping.outputs.out }}

      - name: Stop Rust SCP (and show its log)
        if: always()
        run: |
          set -euxo pipefail
          if [ -f /tmp/rust_scp.pid ]; then
            kill "$(cat /tmp/rust_scp.pid)" 2>/dev/null || true
            sleep 1
            kill -9 "$(cat /tmp/rust_scp.pid)" 2>/dev/null || true
          fi
          echo "----- rust_scp.log (tail) -----"
          tail -n 200 /tmp/rust_scp.log 2>/dev/null || true
