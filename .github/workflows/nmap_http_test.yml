name: Nmap DICOM Web Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dicom-web:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: orthanc-web
            compose: docker/docker-compose.web.yml
            service: orthanc
            port: 8042
            expect: 'path: /system'
          - name: ohif-viewer
            compose: docker/docker-compose.web.yml
            service: viewer
            port: 3000
            expect: 'ohif: /'
          - name: qido-open
            compose: docker/docker-compose.web.yml
            service: qido_open
            port: 8081
            # Match a stable substring (script prints: "warning [DWI-001]: unauthenticated QIDO-RS listing ...")
            expect: 'unauthenticated QIDO-RS listing'
          - name: qido-secured
            compose: docker/docker-compose.web.yml
            service: qido_secured
            port: 8082
            expect: 'qido: secured'

    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap docker-compose curl netcat-openbsd

      - name: Install updated NSE into /usr/share
        run: |
          set -euo pipefail
          sudo mkdir -p /usr/share/nmap/scripts
          sudo cp -f scripts/dicom-web-info.nse /usr/share/nmap/scripts/dicom-web-info.nse
          sudo chown root:root /usr/share/nmap/scripts/dicom-web-info.nse
          sudo chmod 0644 /usr/share/nmap/scripts/dicom-web-info.nse
          sudo nmap --script-updatedb
          nmap --script-help dicom-web-info | sed -n '1,80p' || true

      - name: Up ${{ matrix.target.name }}
        shell: bash
        run: |
          set -euo pipefail

          docker-compose -f ${{ matrix.target.compose }} up -d ${{ matrix.target.service }}

          # Wait for TCP
          for i in {1..200}; do
            nc -z 127.0.0.1 ${{ matrix.target.port }} && break
            sleep 0.3
          done
          nc -zv 127.0.0.1 ${{ matrix.target.port }}

          # Generic: wait for typical HTTP response on root
          for i in {1..200}; do
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 2 "http://127.0.0.1:${{ matrix.target.port }}/" || true)
            case "$CODE" in
              200|301|302|307|308|401|403|404) break ;;
            esac
            sleep 0.3
          done

          case "${{ matrix.target.name }}" in
            orthanc-web)
              # Wait for a real auth challenge on /system (401/403 + WWW-Authenticate)
              for i in {1..200}; do
                RESP="$(curl -sS -o /dev/null -w '%{http_code} %{header_www_authenticate}' --max-time 2 "http://127.0.0.1:${{ matrix.target.port }}/system" || true)"
                read -r CODE WAUTH <<< "$RESP"
                if { [ "$CODE" = "401" ] || [ "$CODE" = "403" ]; } && [ -n "$WAUTH" ] && [ "$WAUTH" != "(null)" ]; then
                  break
                fi
                sleep 0.3
              done

              # Verify default creds succeed (stabilizes version reporting)
              for i in {1..200}; do
                CODE="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 2 -u orthanc:orthanc "http://127.0.0.1:${{ matrix.target.port }}/system" || true)"
                [ "$CODE" = "200" ] && break
                sleep 0.3
              done
              ;;
            ohif-viewer)
              # OHIF: look for a 200 on common mounts
              for i in {1..200}; do
                for p in "/" "/viewer/" "/ohif/"; do
                  CODE="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 2 "http://127.0.0.1:${{ matrix.target.port }}$p" || true)"
                  [ "$CODE" = "200" ] && break 2
                done
                sleep 0.3
              done
              ;;
            qido-open)
              # Mock QIDO-open: ensure the studies endpoint answers with a 200
              for i in {1..200}; do
                CODE="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 2 "http://127.0.0.1:${{ matrix.target.port }}/dicom-web/studies?limit=1" || true)"
                [ "$CODE" = "200" ] && break
                sleep 0.3
              done
              ;;
            qido-secured)
              # Mock QIDO-secured: ensure the studies endpoint challenges (401/403)
              for i in {1..200}; do
                CODE="$(curl -sS -o /dev/null -w '%{http_code}' --max-time 2 "http://127.0.0.1:${{ matrix.target.port }}/dicom-web/studies?limit=1" || true)"
                case "$CODE" in
                  401|403) break ;;
                esac
                sleep 0.3
              done
              ;;
          esac

      - name: Scan ${{ matrix.target.name }}
        id: scan
        env:
          NMAPDIR: /usr/share/nmap
        run: |
          set -o pipefail
          OUT="nmap_http_${{ matrix.target.name }}.txt"
          nmap -d -p ${{ matrix.target.port }} --script dicom-web-info 127.0.0.1 | tee "$OUT"
          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      - name: Assert ${{ matrix.target.name }} output
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.scan.outputs.out }}"
          WANT='${{ matrix.target.expect }}'
          if [ -n "$WANT" ]; then
            if ! grep -F "$WANT" "$OUT"; then
              echo "::error::Missing expected: $WANT"
              sed -n '1,200p' "$OUT" || true
              exit 1
            fi
          fi

      - name: Upload ${{ matrix.target.name }} artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nmap-http-${{ matrix.target.name }}
          path: ${{ steps.scan.outputs.out }}

      - name: Logs ${{ matrix.target.name }}
        if: always()
        run: docker-compose -f ${{ matrix.target.compose }} logs --tail=200 ${{ matrix.target.service }} || true

      - name: Down ${{ matrix.target.name }}
        if: always()
        run: docker-compose -f ${{ matrix.target.compose }} down -v --remove-orphans
