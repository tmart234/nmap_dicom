name: Nmap DICOM Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: orthanc
            host_port: 11112
            service_name: orthanc
            compose_services: "orthanc"
            nmap_args: ""
            expect_vendor_version: "true"
          - name: pynetdicom-scp
            host_port: 11114
            service_name: pynetdicom-scp
            compose_services: "pynetdicom-scp"
            nmap_args: "--script-args dicom-ping.ports=11114"
            expect_vendor_version: "true"
          - name: dcm4che-scp
            host_port: 11115
            service_name: dcm4che-scp
            compose_services: "dcm4che-scp"
            nmap_args: "--script-args dicom-ping.ports=11115,dicom.called_aet=DCM4CHETOOLS"
            expect_vendor_version: "true"
          - name: conquest
            host_port: 5678
            service_name: conquest
            compose_services: "conquest"
            nmap_args: "--script-args dicom-ping.ports=5678,dicom.called_aet=CONQUESTSRV1"
            expect_vendor_version: "true"
          - name: dicom-tls
            host_port: 2762
            service_name: stunnel
            compose_services: "orthanc stunnel"
            nmap_args: "--script-args dicom-ping.ports=2762,dicom.timeout_ms=1500"
            expect_vendor_version: "false"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap tcpdump tshark docker-compose netcat-openbsd openssl

      - name: Copy custom Nmap files
        run: |
          set -eux
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse"
          NMAP_LIB_SRC="nselib/dicom.lua"
          NMAP_DIR="/usr/share/nmap"
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Missing $NMAP_SCRIPT_SRC"; exit 1; }
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Missing $NMAP_LIB_SRC"; exit 1; }
          sudo mkdir -p "$NMAP_DIR/scripts" "$NMAP_DIR/nselib"
          sudo cp "$NMAP_SCRIPT_SRC" "$NMAP_DIR/scripts/"
          sudo cp "$NMAP_LIB_SRC" "$NMAP_DIR/nselib/"
          sudo nmap --script-updatedb

      - name: Build pynetdicom SCP image
        if: matrix.dicom_server.name == 'pynetdicom-scp'
        run: |
          set -eux
          docker build -t my-pynetdicom-scp:latest -f docker/pynetdicom/Dockerfile .

      - name: Prepare stunnel config and certs (TLS row only)
        if: matrix.dicom_server.name == 'dicom-tls'
        run: |
          set -eux
          mkdir -p docker/stunnel/certs
          # Ensure config exists in repo (fail if missing)
          test -f docker/stunnel/stunnel.conf
          # Generate throwaway self-signed certs
          openssl req -x509 -newkey rsa:2048 -nodes \
            -keyout docker/stunnel/certs/server.key \
            -out    docker/stunnel/certs/server.crt \
            -subj "/CN=localhost" -days 1
          cat docker/stunnel/certs/server.key docker/stunnel/certs/server.crt \
            > docker/stunnel/certs/server.pem

      - name: Start DICOM Server Stack (${{ matrix.dicom_server.name }})
        id: start_stack
        run: |
          set -eux
          echo "Starting: ${{ matrix.dicom_server.compose_services }}"
          docker-compose -f docker/docker-compose.yml up -d --remove-orphans ${{ matrix.dicom_server.compose_services }}
          # Warm up
          sleep 30
          STATUS=$(docker-compose -f docker/docker-compose.yml ps -q ${{ matrix.dicom_server.service_name }} | xargs -r docker inspect --format='{{.State.Status}}' || echo "notfound")
          echo "Service status: $STATUS"
          test "$STATUS" = "running"
          # Host port listening?
          for i in {1..10}; do
            if nc -z localhost ${{ matrix.dicom_server.host_port }}; then
              echo "Port ${{ matrix.dicom_server.host_port }} is open"
              echo "startup_success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 3
          done
          echo "::error:: Port ${{ matrix.dicom_server.host_port }} never opened."
          docker-compose -f docker/docker-compose.yml logs --no-color || true
          echo "startup_success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Start tcpdump capture (${{ matrix.dicom_server.name }})
        id: start_tcpdump
        if: steps.start_stack.outputs.startup_success == 'true'
        run: |
          set -eux
          mkdir -p artifacts
          TARGET=${{ matrix.dicom_server.host_port }}
          PCAP="artifacts/dicom_${{ matrix.dicom_server.name }}.pcap"
          sudo tcpdump -i any -s 0 "port $TARGET" -w "$PCAP" &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP" >> $GITHUB_OUTPUT

      - name: Run Nmap Test (${{ matrix.dicom_server.name }})
        id: test_script
        if: steps.start_stack.outputs.startup_success == 'true'
        run: |
          set -euxo pipefail
          mkdir -p artifacts
          OUT="artifacts/nmap_${{ matrix.dicom_server.name }}.out"
          EXTRA=""
          if [ "${{ matrix.dicom_server.name }}" = "dicom-tls" ]; then
            EXTRA="--max-retries 0 --host-timeout 12s --script-timeout 5s"
          fi
          nmap -p ${{ matrix.dicom_server.host_port }} \
               -n -Pn -dd \
               --script dicom-ping \
               $EXTRA \
               ${{ matrix.dicom_server.nmap_args }} \
               --script-trace \
               localhost | tee "$OUT"
          echo "nmap_out=$OUT" >> $GITHUB_OUTPUT

      - name: Assert vendor+version (${{ matrix.dicom_server.name }})
        if: steps.start_stack.outputs.startup_success == 'true' && matrix.dicom_server.expect_vendor_version != 'false'
        run: |
          OUT="${{ steps.test_script.outputs.nmap_out }}"
          grep -E '^[|]_?\s*vendor:\s*\S' "$OUT" || grep -E '^[|]\s+vendor:\s*\S' "$OUT" || { echo "::error::Missing vendor"; tail -n 200 "$OUT"; exit 1; }
          grep -E '^[|]_?\s*version:\s*\S' "$OUT" || grep -E '^[|]\s+version:\s*\S' "$OUT" || { echo "::error::Missing version"; tail -n 200 "$OUT"; exit 1; }
          grep -E '^[|]_?\s*version:\s*.*[0-9]' "$OUT" || grep -E '^[|]\s+version:\s*.*[0-9]' "$OUT" || { echo "::error::Non-numeric version"; exit 1; }

      - name: Assert TLS row (no vendor/version)
        if: steps.start_stack.outputs.startup_success == 'true' && matrix.dicom_server.expect_vendor_version == 'false'
        run: |
          OUT="${{ steps.test_script.outputs.nmap_out }}"
          ! grep -qE '^[|]_?\s*vendor:' "$OUT" || { echo "::error::Unexpected vendor on TLS row"; exit 1; }
          ! grep -qE '^[|]_?\s*version:' "$OUT" || { echo "::error::Unexpected version on TLS row"; exit 1; }
          grep -q "PORT" "$OUT" || { echo "::error::Nmap output missing PORT section"; exit 1; }

      - name: Show Server Logs (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml logs --tail="80" ${{ matrix.dicom_server.service_name }} || true

      - name: Stop tcpdump capture (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          if [ -n "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" ]; then
            sudo kill "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" 2>/dev/null || true
            sleep 1
          fi

      - name: Print PCAP summary (${{ matrix.dicom_server.name }})
        if: always()
        continue-on-error: true
        run: |
          PCAP="${{ steps.start_tcpdump.outputs.pcap_file }}"
          if [ -n "$PCAP" ] && [ -s "$PCAP" ]; then
            echo "--- tshark summary for $PCAP ---"
            tshark -r "$PCAP" -c 50 -Y dicom || true
          else
            echo "No or empty PCAP: $PCAP"
          fi

      - name: Upload artifacts (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nmap-${{ matrix.dicom_server.name }}-artifacts
          path: artifacts
          if-no-files-found: ignore

      - name: Stop DICOM Server Stack (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml down --volumes --remove-orphans
