name: Nmap DICOM Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: orthanc
            host_port: 11112
            service_name: orthanc
            compose_services: "orthanc" # Service(s) to start for this job
            # nmap_args: ""
          - name: pynetdicom-scp
            host_port: 11114
            service_name: pynetdicom-scp
            compose_services: "pynetdicom-scp"
            nmap_args: "--script-args dicom.called_aet=PYNETDICOM,dicom.calling_aet=ECHOSCU" # Match AE Title in script
          - name: dcm4che-scp
            host_port: 11115
            service_name: dcm4che-scp
            compose_services: "dcm4che-scp"
            nmap_args: "--script-args dicom.called_aet=DCM4CHETOOLS,dicom.calling_aet=ECHOSCU" # Match AE Title in command

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap \
            tcpdump \
            tshark \
            docker-compose \
            netcat-openbsd 

      - name: Copy custom Nmap files
        # (This step remains the same)
        run: |
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse"
          NMAP_LIB_SRC="nselib/dicom.lua"
          NMAP_DEFAULT_PATH="/usr/share/nmap"
          echo "Checking for Nmap script at: $PWD/$NMAP_SCRIPT_SRC"
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Nmap script file not found at '$PWD/$NMAP_SCRIPT_SRC'."; exit 1; }
          echo "Checking for Nmap library at: $PWD/$NMAP_LIB_SRC"
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Nmap library file not found at '$PWD/$NMAP_LIB_SRC'."; exit 1; }
          echo "Using standard Nmap path: $NMAP_DEFAULT_PATH"
          echo "Copying Nmap script and library..."
          sudo mkdir -p "${NMAP_DEFAULT_PATH}/scripts/" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo cp "$NMAP_SCRIPT_SRC" "${NMAP_DEFAULT_PATH}/scripts/"
          sudo cp "$NMAP_LIB_SRC" "${NMAP_DEFAULT_PATH}/nselib/"
          echo "Updating Nmap script database..."
          sudo nmap --script-updatedb
          echo "Nmap script database updated."

      - name: Build pynetdicom SCP image
        if: matrix.dicom_server.name == 'pynetdicom-scp'
        run: |
            echo "Building pynetdicom SCP image..."
            # Assumes Dockerfile.pynetdicom and pynetdicom_echo_scp.py are in the repo root
            # Adjust path to Dockerfile (-f) and context (.) if they are elsewhere
            docker build -t my-pynetdicom-scp:latest -f Dockerfile.pynetdicom .
            echo "Image build complete."

      - name: Start DICOM Server Stack (${{ matrix.dicom_server.name }})
        id: start_stack # Give the step an ID
        run: |
            echo "Starting Docker services: ${{ matrix.dicom_server.compose_services }}"
            # Attempt to start services in detached mode using docker-compose (V1)
            docker-compose up -d --remove-orphans ${{ matrix.dicom_server.compose_services }}
            UP_EXIT_CODE=$? # Capture exit code IMMEDIATELY

            # Check if the 'up' command itself failed (e.g., arc unhealthy immediately)
            if [ $UP_EXIT_CODE -ne 0 ]; then
                echo "::error::'docker-compose up' command failed directly with exit code $UP_EXIT_CODE."
                echo "::error::Container status BEFORE dumping logs:"
                docker ps -a # Show status of all containers
                echo "::error::Dumping logs for potentially failed stack:"
                docker-compose logs --no-color || echo "Failed to retrieve docker-compose logs."
                # Set an output variable to indicate failure
                echo "startup_success=false" >> $GITHUB_OUTPUT
                exit $UP_EXIT_CODE # Exit with the original error code
            fi

            # --- If 'up' command succeeded, use sleep to wait ---
            # Determine wait time based on server type
            if [ "${{ matrix.dicom_server.name }}" == "dcm4chee-arc" ]; then
                WAIT_TIME=120 # Longer wait for dcm4chee stack
            else
                WAIT_TIME=30  # Shorter wait for orthanc
            fi
            echo "Docker compose 'up' succeeded. Waiting ${WAIT_TIME}s for stack initialization (${{ matrix.dicom_server.name }})..."
            sleep ${WAIT_TIME}

            # Now check if the primary service container is still running after sleep
            # Use the service name defined in the matrix
            SERVICE_STATUS=$(docker-compose ps -q ${{ matrix.dicom_server.service_name }} | xargs docker inspect --format='{{.State.Status}}' 2>/dev/null || echo "notfound")

            if [ "$SERVICE_STATUS" != "running" ]; then
                echo "::error:: Service '${{ matrix.dicom_server.service_name }}' is not running after wait (Status: $SERVICE_STATUS)."
                echo "::error:: Container status:"
                docker ps -a
                echo "::error:: Dumping logs:"
                docker-compose logs --no-color || echo "Failed to retrieve docker-compose logs."
                echo "startup_success=false" >> $GITHUB_OUTPUT
                exit 1
            fi

            # Check if the host port is listening
            echo "Checking if host port ${{ matrix.dicom_server.host_port }} is listening..."
            PORT_OPEN=false
            # Retry loop for port check
            for i in {1..5}; do
                if nc -z -v localhost ${{ matrix.dicom_server.host_port }}; then
                echo "Port ${{ matrix.dicom_server.host_port }} is open."
                PORT_OPEN=true
                break
                fi
                echo "Port check failed, retrying in 5 seconds..."
                sleep 5
            done

            if [ "$PORT_OPEN" != true ]; then
                echo "::error::Host port ${{ matrix.dicom_server.host_port }} is not open after wait and retries."
                echo "::error:: Container status:"
                docker ps -a
                echo "::error:: Dumping logs:"
                docker-compose logs --no-color || echo "Failed to retrieve docker-compose logs."
                echo "startup_success=false" >> $GITHUB_OUTPUT
                exit 1
            fi

            echo "Service stack for ${{ matrix.dicom_server.name }} appears ready for testing."
            echo "startup_success=true" >> $GITHUB_OUTPUT

      - name: Start tcpdump capture (${{ matrix.dicom_server.name }})
        # (This step remains the same)
        id: start_tcpdump
        run: |
          TARGET_PORT=${{ matrix.dicom_server.host_port }}
          PCAP_FILE="dicom_capture_${{ matrix.dicom_server.name }}.pcap"
          echo "Starting tcpdump capture for port $TARGET_PORT..."
          sudo tcpdump -i any -s 0 "port $TARGET_PORT" -w "$PCAP_FILE" &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP_FILE" >> $GITHUB_OUTPUT
          echo "Tcpdump started (PID: $!), capturing to $PCAP_FILE"

      - name: Run Nmap Test (${{ matrix.dicom_server.name }})
        # (This step remains the same - uses nmap_args from matrix)
        id: test_script
        if: steps.start_stack.outputs.startup_success == 'true'
        run: |
          echo "--- Testing ${{ matrix.dicom_server.name }} DICOM server on host port ${{ matrix.dicom_server.host_port }} ---"
          nmap -p ${{ matrix.dicom_server.host_port }} \
               -dd \
               --script="dicom-ping.nse" \
               ${{ matrix.dicom_server.nmap_args || '' }} \
               --script-trace \
               localhost || { echo "::error::Nmap command failed for ${{ matrix.dicom_server.name }}"; exit 1; }

      - name: Show Server Logs (${{ matrix.dicom_server.name }})
        # (This step remains the same)
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} server logs (Tail) ---"
          docker-compose logs --tail="50" ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs for ${{ matrix.dicom_server.service_name }}."
          echo "--- ${{ matrix.dicom_server.name }} server logs (DICOM Filter) ---"
          docker-compose logs ${{ matrix.dicom_server.service_name }} | grep -A 5 -B 5 -E "DICOM|DIMSE|Association" || echo "No relevant mentions found in ${{ matrix.dicom_server.name }} logs."

      - name: Stop tcpdump capture (${{ matrix.dicom_server.name }})
        # (This step remains the same)
        if: always()
        run: |
          TCPDUMP_PID="${{ steps.start_tcpdump.outputs.tcpdump_pid }}"
          echo "Attempting to stop tcpdump (PID: $TCPDUMP_PID) for ${{ matrix.dicom_server.name }}..."
          if [ -n "$TCPDUMP_PID" ]; then
             sudo kill "$TCPDUMP_PID" 2>/dev/null || echo "tcpdump already stopped or signal failed."
             sleep 2
             sudo kill -0 "$TCPDUMP_PID" 2>/dev/null && sudo kill -9 "$TCPDUMP_PID" || echo "tcpdump cleanly stopped or already gone."
           else
             echo "tcpdump PID not found."
           fi
           sleep 2

      - name: Print PCAP Info (${{ matrix.dicom_server.name }})
       # (This step remains the same)
        if: always()
        run: |
          PCAP_FILE="${{ steps.start_tcpdump.outputs.pcap_file }}"
          echo "Checking PCAP file: $PCAP_FILE"
          if [[ -f "$PCAP_FILE" && -s "$PCAP_FILE" ]]; then
            echo "--- PCAP Info for $PCAP_FILE ---"
            tshark -r "$PCAP_FILE" -c 100 -Y dicom || echo "No DICOM packets found or tshark error."
            echo "--- End PCAP Info ---"
          elif [[ -f "$PCAP_FILE" ]]; then
             echo "PCAP file $PCAP_FILE exists but is empty."
          else
            echo "PCAP file $PCAP_FILE not found."
          fi
        continue-on-error: true

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        # (This step remains the same)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-${{ matrix.dicom_server.name }}
          path: ${{ steps.start_tcpdump.outputs.pcap_file }}
          if-no-files-found: ignore

      # Cleanup: Stop ALL services defined in the compose file at the end of each job
      #          This is simpler than stopping only specific ones if state isn't needed.
      - name: Stop DICOM Server Stack (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          echo "Stopping all docker services..."
          docker-compose down --volumes --remove-orphans # Bring everything down cleanly