name: Nmap DICOM Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    # Define the matrix strategy
    strategy:
      fail-fast: false # Allow other jobs to complete even if one fails
      matrix:
        dicom_server:
          # Define configuration for each server test
          - name: orthanc
            host_port: 11112
            service_name: orthanc # Corresponds to service name in docker-compose.yml
            # Optional: Add specific args if needed, e.g., for AE Titles
            # nmap_args: ""
          - name: dcm4chee
            host_port: 11113
            service_name: dcm4chee
            # Example: AE Title args if needed for dcm4chee
            # nmap_args: "--script-args dicom.called_aet=DCM4CHEE,dicom.calling_aet=ECHOSCU"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap \
            tcpdump \
            tshark \
            docker-compose \
            netcat-openbsd # For healthcheck testing (nc command)

      - name: Copy custom Nmap files
        run: |
          # (This step remains the same as before)
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse"
          NMAP_LIB_SRC="nselib/dicom.lua"
          NMAP_DEFAULT_PATH="/usr/share/nmap"
          echo "Checking for Nmap script at: $PWD/$NMAP_SCRIPT_SRC"
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Nmap script file not found at '$PWD/$NMAP_SCRIPT_SRC'."; exit 1; }
          echo "Checking for Nmap library at: $PWD/$NMAP_LIB_SRC"
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Nmap library file not found at '$PWD/$NMAP_LIB_SRC'."; exit 1; }
          echo "Using standard Nmap path: $NMAP_DEFAULT_PATH"
          echo "Copying Nmap script and library..."
          sudo mkdir -p "${NMAP_DEFAULT_PATH}/scripts/" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo cp "$NMAP_SCRIPT_SRC" "${NMAP_DEFAULT_PATH}/scripts/"
          sudo cp "$NMAP_LIB_SRC" "${NMAP_DEFAULT_PATH}/nselib/"
          echo "Updating Nmap script database..."
          sudo nmap --script-updatedb
          echo "Nmap script database updated."

          - name: Start DICOM Server (${{ matrix.dicom_server.name }})
          run: |
            echo "Starting Docker service: ${{ matrix.dicom_server.service_name }}"
            # Attempt to start the service
            docker-compose up -d --remove-orphans ${{ matrix.dicom_server.service_name }}
            UP_EXIT_CODE=$? # Capture exit code
  
            # Check if docker-compose up failed immediately
            if [ $UP_EXIT_CODE -ne 0 ]; then
              echo "::error::'docker-compose up' failed with exit code $UP_EXIT_CODE. Dumping logs:"
              # Attempt to get logs even if compose up failed
              docker-compose logs ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs after compose up failure."
              exit $UP_EXIT_CODE # Exit with the failure code
            fi
  
            # If compose up seemed okay, proceed with wait and check
            WAIT_TIME=60
            echo "Waiting ${WAIT_TIME}s for ${{ matrix.dicom_server.service_name }} to initialize..."
            sleep ${WAIT_TIME}
  
            echo "Checking if port ${{ matrix.dicom_server.host_port }} is listening..."
            # Check if port is open using netcat
            if ! nc -z -v localhost ${{ matrix.dicom_server.host_port }}; then
              echo "::error::Port ${{ matrix.dicom_server.host_port }} is not open after wait. Dumping logs:"
              docker-compose logs ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs after port check failure."
              # Also check docker ps status for more clues
              echo "Docker container status:"
              docker ps -a --filter "name=${{ matrix.dicom_server.service_name }}"
              exit 1 # Exit with failure
            else
              echo "Port ${{ matrix.dicom_server.host_port }} is open. Proceeding with test."
            fi

      - name: Start tcpdump capture (${{ matrix.dicom_server.name }})
        id: start_tcpdump
        run: |
          TARGET_PORT=${{ matrix.dicom_server.host_port }}
          PCAP_FILE="dicom_capture_${{ matrix.dicom_server.name }}.pcap" # Unique pcap filename
          echo "Starting tcpdump capture for port $TARGET_PORT..."
          sudo tcpdump -i any -s 0 "port $TARGET_PORT" -w "$PCAP_FILE" &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP_FILE" >> $GITHUB_OUTPUT
          echo "Tcpdump started (PID: $!), capturing to $PCAP_FILE"

      - name: Run Nmap Test (${{ matrix.dicom_server.name }})
        id: test_script # Keep id for outcome check
        run: |
          echo "--- Testing ${{ matrix.dicom_server.name }} DICOM server on host port ${{ matrix.dicom_server.host_port }} ---"
          # Use matrix variable for port and potentially for args
          # Add error checking for the nmap command
          nmap -p ${{ matrix.dicom_server.host_port }} \
               -d \
               --script="dicom-ping.nse" \
               ${{ matrix.dicom_server.nmap_args || '' }} \
               --script-trace \
               localhost || { echo "::error::Nmap command failed for ${{ matrix.dicom_server.name }}"; exit 1; }


      - name: Show Server Logs (${{ matrix.dicom_server.name }})
        if: always() # Run even if nmap fails
        run: |
          echo "--- ${{ matrix.dicom_server.name }} server logs (Tail) ---"
          docker-compose logs --tail="50" ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs for ${{ matrix.dicom_server.service_name }}."
          echo "--- ${{ matrix.dicom_server.name }} server logs (DICOM Filter) ---"
          docker-compose logs ${{ matrix.dicom_server.service_name }} | grep -A 5 -B 5 -E "DICOM|DIMSE|Association" || echo "No relevant mentions found in ${{ matrix.dicom_server.name }} logs."


      - name: Stop tcpdump capture (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          # (This step remains similar, just uses the specific PID for this job)
          TCPDUMP_PID="${{ steps.start_tcpdump.outputs.tcpdump_pid }}"
          echo "Attempting to stop tcpdump (PID: $TCPDUMP_PID) for ${{ matrix.dicom_server.name }}..."
          if [ -n "$TCPDUMP_PID" ]; then
             sudo kill "$TCPDUMP_PID" 2>/dev/null || echo "tcpdump already stopped or signal failed."
             sleep 2
             sudo kill -0 "$TCPDUMP_PID" 2>/dev/null && sudo kill -9 "$TCPDUMP_PID" || echo "tcpdump cleanly stopped or already gone."
           else
             echo "tcpdump PID not found."
           fi
           sleep 2

      - name: Print PCAP Info (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          # (Uses the specific pcap_file for this job)
          PCAP_FILE="${{ steps.start_tcpdump.outputs.pcap_file }}"
          echo "Checking PCAP file: $PCAP_FILE"
          if [[ -f "$PCAP_FILE" && -s "$PCAP_FILE" ]]; then
            echo "--- PCAP Info for $PCAP_FILE ---"
            tshark -r "$PCAP_FILE" -c 100 -Y dicom || echo "No DICOM packets found or tshark error."
            echo "--- End PCAP Info ---"
          elif [[ -f "$PCAP_FILE" ]]; then
             echo "PCAP file $PCAP_FILE exists but is empty."
          else
            echo "PCAP file $PCAP_FILE not found."
          fi
        continue-on-error: true

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-${{ matrix.dicom_server.name }} # Unique artifact name
          path: ${{ steps.start_tcpdump.outputs.pcap_file }}
          if-no-files-found: ignore

      # Cleanup: Stop the specific container at the end of each matrix job
      - name: Stop DICOM Server (${{ matrix.dicom_server.name }})
        if: always() # Ensure cleanup runs even if steps fail
        run: |
          echo "Stopping docker service: ${{ matrix.dicom_server.service_name }}"
          docker-compose stop ${{ matrix.dicom_server.service_name }}
          # Optional: could use 'docker-compose down' if state doesn't need preserving between matrix jobs (unlikely)