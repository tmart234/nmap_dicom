name: Rust C-ECHO (dicom-rs) + Nmap ping

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rust-echoscu-ping:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap netcat-openbsd tcpdump tshark

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install dicom-echoscu
        run: |
          set -euxo pipefail
          cargo install --locked dicom-echoscu
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      # --- Copy your custom NSE + library (same files you use in the nmap ping matrix job)
      - name: Install Nmap dicom-ping NSE + lib
        run: |
          set -e
          sudo mkdir -p /usr/share/nmap/scripts /usr/share/nmap/nselib
          sudo cp scripts/dicom-ping.nse /usr/share/nmap/scripts/
          sudo cp nselib/dicom.lua      /usr/share/nmap/nselib/
          sudo nmap --script-updatedb

      - name: Start Orthanc (DIMSE on host 11112)
        run: |
          set -e
          # PORT MAPPING: host 11112 -> container 4242
          docker run -d --rm --name orthanc_test \
            -p 11112:4242 -p 8042:8042 \
            -e ORTHANC__REMOTE_ACCESS_ALLOWED=true \
            orthancteam/orthanc:latest
          # wait for DIMSE to accept TCP
          for i in {1..60}; do
            nc -z 127.0.0.1 11112 && break
            sleep 1
          done
          nc -z 127.0.0.1 11112

      - name: Start tcpdump (optional)
        id: cap
        run: |
          PCAP="dicom_rust_ping.pcap"
          sudo tcpdump -i any -s 0 "port 11112" -w "$PCAP" &
          echo "pcap=$PCAP" >> "$GITHUB_OUTPUT"
          echo "pid=$!"   >> "$GITHUB_OUTPUT"

      # ---------- Nmap DICOM ping (this is the bit you wanted added) ----------
      - name: Nmap DICOM ping (dicom-ping.nse)
        id: nmap_ping
        run: |
          set -euxo pipefail
          OUT="nmap_dicom_ping_orthanc.txt"
          nmap -p 11112 \
               --script "dicom-ping" \
               --script-trace \
               --reason \
               --unprivileged \
               --script-args dicom.called_aet=ORTHANC \
               localhost | tee "$OUT"
          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      - name: Assert Nmap ping output
        run: |
          OUT="${{ steps.nmap_ping.outputs.out }}"
          # require vendor + version like your matrix job
          grep -E '^[|]_?\s*vendor:\s*\S'  "$OUT" || { echo '::error::Missing vendor:';  tail -n 100 "$OUT"; exit 1; }
          grep -E '^[|]_?\s*version:\s*.*[0-9]' "$OUT" || { echo '::error::Missing version:'; tail -n 100 "$OUT"; exit 1; }

      # ---------- Rust C-ECHO after Nmap ping ----------
      - name: Run dicom-echoscu (C-ECHO)
        id: echoscu
        run: |
          set -euxo pipefail
          OUT="echoscu_orthanc.log"
          for i in {1..10}; do
            if dicom-echoscu --verbose --called-ae-title ORTHANC 127.0.0.1:11112 | tee "$OUT"; then
              break
            fi
            echo "ECHO failed (try $i); sleeping 1s…"
            sleep 1
          done
          if grep -q "✓ C-ECHO successful" "$OUT" || grep -q "Status:[[:space:]]*0000H" "$OUT"; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
            echo "C-ECHO success confirmed."
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "::error::ECHO never succeeded"
            exit 1
          fi

      - name: Stop tcpdump
        if: always()
        run: |
          PID="${{ steps.cap.outputs.pid }}"
          [ -n "$PID" ] && sudo kill "$PID" 2>/dev/null || true
          sleep 1

      - name: Quick PCAP summary
        if: always()
        run: |
          PCAP="${{ steps.cap.outputs.pcap }}"
          [ -s "$PCAP" ] && tshark -r "$PCAP" -c 50 -Y dicom || echo "No DICOM frames captured."

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-nmap-ping-and-echoscu
          path: |
            ${{ steps.nmap_ping.outputs.out }}
            echoscu_orthanc.log
            ${{ steps.cap.outputs.pcap }}

      - name: Dump Orthanc logs (tail)
        if: always()
        run: docker logs --tail=200 orthanc_test || true

      - name: Stop Orthanc
        if: always()
        run: docker stop orthanc_test || true
