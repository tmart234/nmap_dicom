name: Nmap DICOM Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: orthanc # Port 11112 is in standard portrule check
            host_port: 11112
            service_name: orthanc
            compose_services: "orthanc"
            nmap_args: ""
            expect_vendor_version: "true"
          - name: pynetdicom-scp # Port 11114 needs explicit allowance via portrule arg
            host_port: 11114
            service_name: pynetdicom-scp
            compose_services: "pynetdicom-scp"
            nmap_args: "--script-args dicom-ping.ports=11114"
            expect_vendor_version: "true"
          - name: dcm4che-scp # Port 11115 needs explicit allowance via portrule arg
            host_port: 11115
            service_name: dcm4che-scp
            compose_services: "dcm4che-scp"
            nmap_args: "--script-args dicom-ping.ports=11115,dicom.called_aet=DCM4CHETOOLS"
            expect_vendor_version: "true"
          - name: conquest
            host_port: 5678
            service_name: conquest
            compose_services: "conquest"
            nmap_args: "--script-args dicom-ping.ports=5678,dicom.called_aet=CONQUESTSRV1"
            expect_vendor_version: "true"
          - name: dicom-tls      # NEW: TLS listener on 2762 via stunnel -> Orthanc 4242
            host_port: 2762
            service_name: stunnel
            compose_services: "orthanc stunnel"
            nmap_args: "--script-args dicom-ping.ports=2762"
            expect_vendor_version: "false"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap \
            tcpdump \
            tshark \
            docker-compose \
            netcat-openbsd

      - name: Copy custom Nmap files
        run: |
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse"
          NMAP_LIB_SRC="nselib/dicom.lua"
          NMAP_DEFAULT_PATH="/usr/share/nmap"
          echo "Checking for Nmap script at: $PWD/$NMAP_SCRIPT_SRC"
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Nmap script file not found at '$NMAP_SCRIPT_SRC'."; exit 1; }
          echo "Checking for Nmap library at: $PWD/$NMAP_LIB_SRC"
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Nmap library file not found at '$NMAP_LIB_SRC'."; exit 1; }
          echo "Using standard Nmap path: $NMAP_DEFAULT_PATH"
          sudo mkdir -p "${NMAP_DEFAULT_PATH}/scripts/" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo cp "$NMAP_SCRIPT_SRC" "${NMAP_DEFAULT_PATH}/scripts/"
          sudo cp "$NMAP_LIB_SRC" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo nmap --script-updatedb
          echo "Nmap script database updated."

      - name: Build pynetdicom SCP image
        if: matrix.dicom_server.name == 'pynetdicom-scp'
        run: |
          echo "Building pynetdicom SCP image..."
          docker build -t my-pynetdicom-scp:latest -f docker/pynetdicom/Dockerfile .
          echo "Image build complete."

      # NEW: Create stunnel config + throwaway self-signed certs for TLS test
      - name: Prepare stunnel config and certs
        if: matrix.dicom_server.name == 'dicom-tls'
        run: |
          mkdir -p docker/stunnel/certs
          cat > docker/stunnel/stunnel.conf <<'CONF'
          foreground = yes
          debug = 3
          socket = l:TCP_NODELAY=1
          socket = r:TCP_NODELAY=1
          options = NO_SSLv2
          options = NO_SSLv3
          options = NO_TLSv1
          options = NO_TLSv1.1

          [dicom-tls]
          accept = 0.0.0.0:2762
          connect = orthanc:4242
          client = no
          cert = /etc/stunnel/certs/server.pem
          verify = 0
          CONF

          # throwaway keypair for CI
          openssl req -x509 -newkey rsa:2048 -nodes \
            -keyout docker/stunnel/certs/server.key \
            -out    docker/stunnel/certs/server.crt \
            -subj "/CN=localhost" -days 1
          cat docker/stunnel/certs/server.key docker/stunnel/certs/server.crt \
            > docker/stunnel/certs/server.pem
          echo "Prepared docker/stunnel/stunnel.conf and certs."

      - name: Start DICOM Server Stack (${{ matrix.dicom_server.name }})
        id: start_stack
        run: |
          echo "Starting Docker services: ${{ matrix.dicom_server.compose_services }}"
          docker-compose up -d --remove-orphans ${{ matrix.dicom_server.compose_services }}
          UP_EXIT_CODE=$?
          if [ $UP_EXIT_CODE -ne 0 ]; then
            echo "::error::'docker-compose up' failed (exit $UP_EXIT_CODE)."
            docker ps -a
            docker-compose logs --no-color || true
            echo "startup_success=false" >> $GITHUB_OUTPUT
            exit $UP_EXIT_CODE
          fi

          if [ "${{ matrix.dicom_server.name }}" = "dcm4chee-arc" ]; then
            WAIT_TIME=120
          else
            WAIT_TIME=30
          fi
          echo "Waiting ${WAIT_TIME}s for ${{ matrix.dicom_server.name }} to initialize..."
          sleep ${WAIT_TIME}

          SERVICE_STATUS=$(docker-compose ps -q ${{ matrix.dicom_server.service_name }} | xargs -r docker inspect --format='{{.State.Status}}' 2>/dev/null || echo "notfound")
          if [ "$SERVICE_STATUS" != "running" ]; then
            echo "::error:: Service '${{ matrix.dicom_server.service_name }}' not running (Status: $SERVICE_STATUS)."
            docker ps -a
            docker-compose logs --no-color || true
            echo "startup_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Checking if host port ${{ matrix.dicom_server.host_port }} is listening..."
          PORT_OPEN=false
          for i in {1..5}; do
            if nc -z localhost ${{ matrix.dicom_server.host_port }}; then
              echo "Port ${{ matrix.dicom_server.host_port }} is open."
              PORT_OPEN=true
              break
            fi
            echo "Port not open yet, retrying in 5s..."
            sleep 5
          done
          if [ "$PORT_OPEN" != "true" ]; then
            echo "::error:: Host port ${{ matrix.dicom_server.host_port }} is not open."
            docker ps -a
            docker-compose logs --no-color || true
            echo "startup_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "startup_success=true" >> $GITHUB_OUTPUT

      - name: Start tcpdump capture (${{ matrix.dicom_server.name }})
        id: start_tcpdump
        run: |
          TARGET_PORT=${{ matrix.dicom_server.host_port }}
          PCAP_FILE="dicom_capture_${{ matrix.dicom_server.name }}.pcap"
          echo "Starting tcpdump capture for port $TARGET_PORT..."
          sudo tcpdump -i any -s 0 "port $TARGET_PORT" -w "$PCAP_FILE" &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP_FILE" >> $GITHUB_OUTPUT
          echo "Tcpdump started (PID: $!), capturing to $PCAP_FILE"

      - name: Run Nmap Test (${{ matrix.dicom_server.name }})
        id: test_script
        if: steps.start_stack.outputs.startup_success == 'true'
        run: |
          echo "--- Testing ${{ matrix.dicom_server.name }} on host port ${{ matrix.dicom_server.host_port }} ---"
          OUT="nmap_${{ matrix.dicom_server.name }}.out"
          nmap -p ${{ matrix.dicom_server.host_port }} \
               -dd \
               --script="dicom-ping.nse" \
               ${{ matrix.dicom_server.nmap_args }} \
               --script-trace \
               localhost | tee "$OUT"
          echo "nmap_out=$OUT" >> $GITHUB_OUTPUT

      - name: Assert vendor and version are present (${{ matrix.dicom_server.name }})
        if: steps.start_stack.outputs.startup_success == 'true' && matrix.dicom_server.expect_vendor_version != 'false'
        run: |
          OUT="${{ steps.test_script.outputs.nmap_out }}"
          if ! grep -E '^[|]_?\s*vendor:\s*\S' "$OUT" && ! grep -E '^[|]\s+vendor:\s*\S' "$OUT"; then
            echo "::error::Missing 'vendor:' in Nmap output for ${{ matrix.dicom_server.name }}."
            tail -n 200 "$OUT" || true
            exit 1
          fi
          if ! grep -E '^[|]_?\s*version:\s*\S' "$OUT" && ! grep -E '^[|]\s+version:\s*\S' "$OUT"; then
            echo "::error::Missing 'version:' in Nmap output for ${{ matrix.dicom_server.name }}."
            tail -n 200 "$OUT" || true
            exit 1
          fi
          if ! grep -E '^[|]_?\s*version:\s*.*[0-9]' "$OUT" && ! grep -E '^[|]\s+version:\s*.*[0-9]' "$OUT"; then
            echo "::error::'version:' line found but does not contain digits for ${{ matrix.dicom_server.name }}."
            exit 1
          fi

      - name: Show Server Logs (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} server logs (Tail) ---"
          docker-compose logs --tail="50" ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs."
          echo "--- ${{ matrix.dicom_server.name }} server logs (DICOM Filter) ---"
          docker-compose logs ${{ matrix.dicom_server.service_name }} | grep -A 5 -B 5 -E "DICOM|DIMSE|Association" || echo "No relevant mentions."

      - name: Stop tcpdump capture (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          TCPDUMP_PID="${{ steps.start_tcpdump.outputs.tcpdump_pid }}"
          echo "Stopping tcpdump PID: $TCPDUMP_PID"
          if [ -n "$TCPDUMP_PID" ]; then
            sudo kill "$TCPDUMP_PID" 2>/dev/null || true
            sleep 2
            sudo kill -0 "$TCPDUMP_PID" 2>/dev/null && sudo kill -9 "$TCPDUMP_PID" || true
          else
            echo "No tcpdump PID found."
          fi
          sleep 2

      - name: Print PCAP Info (${{ matrix.dicom_server.name }})
        if: always()
        continue-on-error: true
        run: |
          PCAP_FILE="${{ steps.start_tcpdump.outputs.pcap_file }}"
          echo "Checking PCAP file: $PCAP_FILE"
          if [[ -f "$PCAP_FILE" && -s "$PCAP_FILE" ]]; then
            echo "--- PCAP Info for $PCAP_FILE ---"
            tshark -r "$PCAP_FILE" -c 100 -Y dicom || echo "No DICOM packets found or tshark error."
            echo "--- End PCAP Info ---"
          elif [[ -f "$PCAP_FILE" ]]; then
            echo "PCAP file $PCAP_FILE exists but is empty."
          else
            echo "PCAP file $PCAP_FILE not found."
          fi

      - name: Upload artifacts (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nmap-${{ matrix.dicom_server.name }}-artifacts
          path: |
            ${{ steps.test_script.outputs.nmap_out }}
            ${{ steps.start_tcpdump.outputs.pcap_file }}
          if-no-files-found: ignore

      - name: Stop DICOM Server Stack (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          echo "Stopping all docker services..."
          docker-compose down --volumes --remove-orphans
