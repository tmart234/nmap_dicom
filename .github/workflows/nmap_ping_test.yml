name: Nmap DICOM Test (using test_nmap.sh)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Keep fetch-depth if needed

      # Optional: Keep the diagnostic step
      - name: List files after checkout (Diagnostic)
        run: |
          echo "Current directory: $PWD"
          ls -la .

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap \
            tcpdump \
            tshark \
            docker-compose

      - name: Copy custom Nmap files
        run: |
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse"
          NMAP_LIB_SRC="nselib/dicom.lua"
          NMAP_DEFAULT_PATH="/usr/share/nmap"

          echo "Checking for Nmap script at: $PWD/$NMAP_SCRIPT_SRC"
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Nmap script file not found at '$PWD/$NMAP_SCRIPT_SRC'."; exit 1; }
          echo "Checking for Nmap library at: $PWD/$NMAP_LIB_SRC"
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Nmap library file not found at '$PWD/$NMAP_LIB_SRC'."; exit 1; }

          echo "Using standard Nmap path: $NMAP_DEFAULT_PATH"
          echo "Copying Nmap script and library..."
          sudo mkdir -p "${NMAP_DEFAULT_PATH}/scripts/" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo cp "$NMAP_SCRIPT_SRC" "${NMAP_DEFAULT_PATH}/scripts/"
          sudo cp "$NMAP_LIB_SRC" "${NMAP_DEFAULT_PATH}/nselib/"

          echo "Updating Nmap script database..."
          sudo nmap --script-updatedb
          echo "Nmap script database updated."

      - name: Start tcpdump capture
        id: start_tcpdump
        run: |
          # Define HOST ports from docker-compose
          ORTHANC_PORT=11112
          DCM4CHEE_PORT=11113
          PCAP_FILE="dicom_capture_combined.pcap" # Use a single combined file

          echo "Starting tcpdump capture for ports $ORTHANC_PORT and $DCM4CHEE_PORT..."
          # Capture on 'any' interface for traffic to/from either host port
          sudo tcpdump -i any -s 0 "port $ORTHANC_PORT or port $DCM4CHEE_PORT" -w "$PCAP_FILE" &
          # Store PID and PCAP filename for later steps
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP_FILE" >> $GITHUB_OUTPUT
          echo "Tcpdump started (PID: $!), capturing to $PCAP_FILE"


      - name: Make test script executable
        run: chmod +x test_nmap.sh

      - name: Run DICOM Test Script
        id: test_script
        run: |
          # Execute script from repo root
          bash ./test_nmap.sh

      - name: Stop tcpdump capture
        if: always() # Ensure tcpdump is stopped even if tests fail
        run: |
          TCPDUMP_PID="${{ steps.start_tcpdump.outputs.tcpdump_pid }}"
          echo "Attempting to stop tcpdump (PID: $TCPDUMP_PID)..."
          if [ -n "$TCPDUMP_PID" ]; then
            # Try graceful termination first, then force if needed
            sudo kill "$TCPDUMP_PID" 2>/dev/null || echo "tcpdump already stopped or signal failed."
            sleep 2 # Give time for graceful shutdown
            sudo kill -0 "$TCPDUMP_PID" 2>/dev/null && sudo kill -9 "$TCPDUMP_PID" || echo "tcpdump cleanly stopped or already gone."
          else
            echo "tcpdump PID not found. Capture might not have started correctly."
          fi
          sleep 2 # Extra pause to ensure file system syncs

      - name: Print PCAP Info
        if: always()
        run: |
          PCAP_FILE="${{ steps.start_tcpdump.outputs.pcap_file }}"
          echo "Checking PCAP file: $PCAP_FILE"
          if [[ -f "$PCAP_FILE" && -s "$PCAP_FILE" ]]; then # Check if file exists and is not empty
            echo "--- PCAP Info for $PCAP_FILE ---"
            # Increase packet count slightly
            tshark -r "$PCAP_FILE" -c 100 -Y dicom || echo "No DICOM packets found or tshark error."
            echo "--- End PCAP Info ---"
          elif [[ -f "$PCAP_FILE" ]]; then
             echo "PCAP file $PCAP_FILE exists but is empty."
          else
            echo "PCAP file $PCAP_FILE not found."
          fi
        continue-on-error: true # Don't fail workflow if tshark has issues

      - name: Upload pcap artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-capture # Changed name to reflect combined capture
          path: ${{ steps.start_tcpdump.outputs.pcap_file }}
          if-no-files-found: ignore # Don't fail if pcap is empty/missing

      - name: Check test script outcome
        if: steps.test_script.outcome != 'success'
        run: |
          echo "::error::Test script 'test_nmap.sh' failed!"
          exit 1