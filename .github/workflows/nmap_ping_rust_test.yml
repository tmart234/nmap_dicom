name: Rust DICOM Ping (Nmap)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rust-dicom-ping:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap docker-compose netcat-openbsd curl

      - name: Install Nmap script + lib
        run: |
          set -eux
          sudo mkdir -p /usr/share/nmap/scripts /usr/share/nmap/nselib
          sudo cp scripts/dicom-ping.nse /usr/share/nmap/scripts/
          sudo cp nselib/dicom.lua       /usr/share/nmap/nselib/
          sudo nmap --script-updatedb

      - name: Start upstream Orthanc (DIMSE on 11112)
        run: |
          set -eux
          docker run -d --rm --name orthanc_up \
            -p 11112:4242 -p 8042:8042 \
            -e ORTHANC__REMOTE_ACCESS_ALLOWED=true \
            orthancteam/orthanc:latest
          # wait for DIMSE (mapped to host 11112)
          for i in {1..60}; do nc -z 127.0.0.1 11112 && break; sleep 1; done
          nc -z 127.0.0.1 11112

      - name: Install Rust proxy SCP
        run: |
          set -eux
          cargo install --locked dicom-scpproxy
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Start Rust DICOM SCP (dicom-scpproxy on 11116)
        run: |
          set -eux
          PORT=11116
          LOG=rust_scpproxy.log
          BIN="$HOME/.cargo/bin/dicom-scpproxy"

          # NOTE: adjust flags if your binary differs (check `$BIN --help`)
          nohup "$BIN" \
            --bind 0.0.0.0:${PORT} \
            --upstream 127.0.0.1:11112 \
            --ae-title RUSTDICOM \
            --called-aet ORTHANC \
            --accept-unknown-aet \
            > "$LOG" 2>&1 &

          echo "pid=$!" >> $GITHUB_OUTPUT

          # Wait for the Rust SCP to LISTEN
          for i in {1..60}; do
            nc -z 127.0.0.1 ${PORT} && break
            sleep 0.5
          done
          nc -z 127.0.0.1 ${PORT}
          echo "Rust DICOM SCP is listening on ${PORT}"
          tail -n +1 "$LOG" | sed -n '1,120p' || true

      - name: Nmap ping Rust DICOM (not Orthanc)
        id: nmap
        run: |
          set -euxo pipefail
          OUT="nmap_rust_dicom.txt"
          # Tell the script which nonstandard port to treat as DICOM and set a called AET that our proxy accepts
          nmap -p 11116 --script dicom-ping \
            --script-args dicom-ping.ports=11116,dicom.called_aet=RUSTDICOM \
            localhost | tee "$OUT"
          echo "out=$OUT" >> "$GITHUB_OUTPUT"

      - name: Assert vendor + version came from Rust side
        run: |
          OUT="${{ steps.nmap.outputs.out }}"
          # Must have vendor and version lines
          grep -E '^[|]_?\s*vendor:\s*\S'  "$OUT" || { echo "::error::Missing vendor"; exit 1; }
          grep -E '^[|]_?\s*version:\s*\S' "$OUT" || { echo "::error::Missing version"; exit 1; }
          # Optional: try to ensure it's NOT DCMTK/Orthanc (best-effort)
          if grep -qiE 'dcmtk|orthanc' "$OUT"; then
            echo "::warning::Scan output mentions DCMTK/Orthanc; your proxy may be transparently tunneling Implementation info."
            echo "If you want the Rust proxy to expose its own Implementation Class/Version, check dicom-scpproxy flags/env."
          fi
          sed -n '1,200p' "$OUT"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-dicom-ping
          path: |
            ${{ steps.nmap.outputs.out }}
            rust_scpproxy.log
          if-no-files-found: ignore

      - name: Teardown
        if: always()
        run: |
          docker stop orthanc_up || true
          pkill -f dicom-scpproxy || true
