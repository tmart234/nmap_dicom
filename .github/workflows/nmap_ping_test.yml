name: Nmap DICOM Test Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nmap-dicom:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: orthanc
            host_port: 11112
            service_name: orthanc
            container_name_pattern: "orthanc_test"
            compose_file_path: "nmap_dicom/docker-compose.yml" # Path to compose file from repo root
            compose_services: "orthanc"
            # nmap_args: ""
          - name: dcm4chee-arc
            host_port: 11113
            service_name: arc
            container_name_pattern: "dcm4chee_arc_test"
            compose_file_path: "nmap_dicom/docker-compose.yml" # Path to compose file from repo root
            compose_services: "ldap db arc"
            nmap_args: "--script-args dicom.called_aet=DCM4CHEE_ARC,dicom.calling_aet=ECHOSCU"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List Files for Debugging
        run: |
          echo "Current PWD: $PWD"
          echo "Listing files in repository root:"
          ls -Rla

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            nmap \
            tcpdump \
            tshark \
            docker-compose \
            netcat-openbsd \
            ldap-utils

      # ------------------------------------------------------------ #
      #  CORRECTED STEP: Reverted paths to user's original version   #
      # ------------------------------------------------------------ #
      - name: Copy custom Nmap files
        run: |
          NMAP_SCRIPT_SRC="scripts/dicom-ping.nse" # Reverted path
          NMAP_LIB_SRC="nselib/dicom.lua"         # Reverted path
          NMAP_DEFAULT_PATH="/usr/share/nmap"

          echo "Checking for Nmap script at: $PWD/$NMAP_SCRIPT_SRC"
          # Use the variable directly in the check/copy, assumes path is relative to $PWD
          [ -f "$NMAP_SCRIPT_SRC" ] || { echo "::error::Nmap script file not found at '$PWD/$NMAP_SCRIPT_SRC'. Check repository structure."; exit 1; }

          echo "Checking for Nmap library at: $PWD/$NMAP_LIB_SRC"
           # Use the variable directly in the check/copy
          [ -f "$NMAP_LIB_SRC" ] || { echo "::error::Nmap library file not found at '$PWD/$NMAP_LIB_SRC'. Check repository structure."; exit 1; }

          echo "Using standard Nmap path: $NMAP_DEFAULT_PATH"
          echo "Copying Nmap script and library..."
          sudo mkdir -p "${NMAP_DEFAULT_PATH}/scripts/" "${NMAP_DEFAULT_PATH}/nselib/"
          sudo cp "$NMAP_SCRIPT_SRC" "${NMAP_DEFAULT_PATH}/scripts/"
          sudo cp "$NMAP_LIB_SRC" "${NMAP_DEFAULT_PATH}/nselib/"
          echo "Updating Nmap script database..."
          sudo nmap --script-updatedb
          echo "Nmap script database updated."


      - name: Start DICOM Server Stack (${{ matrix.dicom_server.name }})
        id: start_server
        run: |
          COMPOSE_FILE="${{ matrix.dicom_server.compose_file_path }}"
          echo "Starting Docker services from ${COMPOSE_FILE}: ${{ matrix.dicom_server.compose_services }}"
          docker-compose -f "$COMPOSE_FILE" up -d --remove-orphans ${{ matrix.dicom_server.compose_services }}

          # Improved wait logic
          MAX_WAIT=180
          CHECK_INTERVAL=10
          ELAPSED_TIME=0
          CONTAINER_NAME_PATTERN="${{ matrix.dicom_server.container_name_pattern }}"
          TARGET_PORT="${{ matrix.dicom_server.host_port }}"

          echo "Waiting up to ${MAX_WAIT}s for container matching '${CONTAINER_NAME_PATTERN}' to be running/healthy and port ${TARGET_PORT} to be listening..."

          while [ $ELAPSED_TIME -lt $MAX_WAIT ]; do
            CONTAINER_ID=$(docker ps -q --filter "name=${CONTAINER_NAME_PATTERN}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Container '${CONTAINER_NAME_PATTERN}' not found yet..."
            else
              CONTAINER_STATUS=$(docker inspect --format '{{.State.Status}}' "$CONTAINER_ID")
              CONTAINER_HEALTH="N/A"
              if docker inspect --format '{{if .State.Health}}{{.State.Health.Status}}{{end}}' "$CONTAINER_ID" > /dev/null 2>&1; then
                 HEALTH_STATUS_RAW=$(docker inspect --format '{{if .State.Health}}{{.State.Health.Status}}{{end}}' "$CONTAINER_ID")
                 if [ -n "$HEALTH_STATUS_RAW" ]; then CONTAINER_HEALTH="$HEALTH_STATUS_RAW"; fi
              fi
              echo "Container Status: ${CONTAINER_STATUS}, Health: ${CONTAINER_HEALTH}"
              PORT_LISTENING=false
              if nc -z -v localhost ${TARGET_PORT} > /dev/null 2>&1; then PORT_LISTENING=true; echo "Port ${TARGET_PORT} is listening."; else echo "Port ${TARGET_PORT} is not listening yet."; fi

              # Check conditions for success
              if [ "$CONTAINER_STATUS" = "running" ] && ${PORT_LISTENING}; then
                 if [ "${{ matrix.dicom_server.name }}" == "dcm4chee-arc" ] && [ "$CONTAINER_HEALTH" != "N/A" ]; then
                    if [ "$CONTAINER_HEALTH" = "healthy" ]; then echo "dcm4chee-arc container is healthy. Proceeding."; exit 0; else echo "dcm4chee-arc container health is '${CONTAINER_HEALTH}'. Waiting..."; fi
                 elif [ "$CONTAINER_HEALTH" = "healthy" ] || [ "$CONTAINER_HEALTH" = "N/A" ]; then
                    echo "Container '${CONTAINER_NAME_PATTERN}' is ready. Proceeding."; exit 0;
                 fi
              fi
            fi
            sleep $CHECK_INTERVAL; ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL)); echo "Waited ${ELAPSED_TIME}s..."
          done

          echo "::error::Container '${CONTAINER_NAME_PATTERN}' did not become ready within ${MAX_WAIT} seconds."
          echo "--- Current Docker State ---"; docker ps -a
          echo "--- Service Logs Before Exit ---"; docker-compose -f "$COMPOSE_FILE" logs --tail 50 ${{ matrix.dicom_server.service_name }} || echo "Could not get final logs for ${{ matrix.dicom_server.service_name }}"
          if [ "${{ matrix.dicom_server.name }}" == "dcm4chee-arc" ]; then docker-compose -f "$COMPOSE_FILE" logs --tail 50 db || true; docker-compose -f "$COMPOSE_FILE" logs --tail 50 ldap || true; fi
          exit 1 # Failure

      - name: Dump Logs on Failure (${{ matrix.dicom_server.name }})
        if: failure() && steps.start_server.outcome == 'failure'
        run: |
          COMPOSE_FILE="${{ matrix.dicom_server.compose_file_path }}"
          echo "::error:: Server startup or readiness check failed for ${{ matrix.dicom_server.name }}. Dumping diagnostic information..."
          echo "--- Docker Container Status ---"
          docker ps -a || echo "Failed to retrieve docker ps status."
          echo "--- Docker Compose Logs ---"
          if [ "${{ matrix.dicom_server.name }}" == "dcm4chee-arc" ]; then
            docker-compose -f "$COMPOSE_FILE" logs ldap db arc || echo "Failed to retrieve specific docker-compose logs for dcm4chee stack."
          else
            docker-compose -f "$COMPOSE_FILE" logs ${{ matrix.dicom_server.service_name }} || echo "Failed to retrieve docker-compose logs for ${{ matrix.dicom_server.service_name }}."
          fi

      - name: Start tcpdump capture (${{ matrix.dicom_server.name }})
        if: success()
        id: start_tcpdump
        run: |
          TARGET_PORT=${{ matrix.dicom_server.host_port }}
          PCAP_FILE="dicom_capture_${{ matrix.dicom_server.name }}.pcap"
          echo "Starting tcpdump capture for port $TARGET_PORT..."
          sudo tcpdump -i any -s 0 "port $TARGET_PORT" -w "$PCAP_FILE" &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
          echo "pcap_file=$PCAP_FILE" >> $GITHUB_OUTPUT
          echo "Tcpdump started (PID: $!), capturing to $PCAP_FILE"

      - name: Run Nmap Test (${{ matrix.dicom_server.name }})
        if: success()
        id: test_script
        run: |
          echo "--- Testing ${{ matrix.dicom_server.name }} DICOM server on host port ${{ matrix.dicom_server.host_port }} ---"
          nmap -p ${{ matrix.dicom_server.host_port }} \
               -d \
               --script="dicom-ping.nse" \
               ${{ matrix.dicom_server.nmap_args || '' }} \
               --script-trace \
               localhost || { echo "::error::Nmap command failed for ${{ matrix.dicom_server.name }}"; exit 1; }

      - name: Show Server Logs (${{ matrix.dicom_server.name }})
        if: always() && steps.start_server.outcome == 'success'
        run: |
          COMPOSE_FILE="${{ matrix.dicom_server.compose_file_path }}"
          echo "--- ${{ matrix.dicom_server.name }} server logs (Tail) ---"
          docker-compose -f "$COMPOSE_FILE" logs --tail="50" ${{ matrix.dicom_server.service_name }} || echo "Failed to get logs for ${{ matrix.dicom_server.service_name }}."
          echo "--- ${{ matrix.dicom_server.name }} server logs (DICOM Filter) ---"
          docker-compose -f "$COMPOSE_FILE" logs ${{ matrix.dicom_server.service_name }} | grep -A 5 -B 5 -E "DICOM|DIMSE|Association" || echo "No relevant mentions found in ${{ matrix.dicom_server.name }} logs."

      - name: Stop tcpdump capture (${{ matrix.dicom_server.name }})
        if: always() && steps.start_tcpdump.conclusion == 'success'
        run: |
          TCPDUMP_PID="${{ steps.start_tcpdump.outputs.tcpdump_pid }}"
          echo "Attempting to stop tcpdump (PID: $TCPDUMP_PID) for ${{ matrix.dicom_server.name }}..."
          if [ -n "$TCPDUMP_PID" ]; then
              sudo kill "$TCPDUMP_PID" 2>/dev/null || echo "tcpdump already stopped or signal failed."
              sleep 2
              sudo kill -0 "$TCPDUMP_PID" 2>/dev/null && sudo kill -9 "$TCPDUMP_PID" || echo "tcpdump cleanly stopped or already gone."
            else
              echo "tcpdump PID not found."
            fi
            sleep 2

      - name: Print PCAP Info (${{ matrix.dicom_server.name }})
        if: always() && steps.start_tcpdump.conclusion == 'success'
        run: |
          PCAP_FILE="${{ steps.start_tcpdump.outputs.pcap_file }}"
          echo "Checking PCAP file: $PCAP_FILE"
          if [[ -f "$PCAP_FILE" && -s "$PCAP_FILE" ]]; then
            echo "--- PCAP Info for $PCAP_FILE ---"
            tshark -r "$PCAP_FILE" -c 100 -Y dicom || echo "No DICOM packets found or tshark error."
            echo "--- End PCAP Info ---"
          elif [[ -f "$PCAP_FILE" ]]; then
              echo "PCAP file $PCAP_FILE exists but is empty."
          else
            echo "PCAP file $PCAP_FILE not found."
          fi
        continue-on-error: true

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always() && steps.start_tcpdump.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-${{ matrix.dicom_server.name }}
          path: ${{ steps.start_tcpdump.outputs.pcap_file }}
          if-no-files-found: ignore

      - name: Stop DICOM Server Stack (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          COMPOSE_FILE="${{ matrix.dicom_server.compose_file_path }}"
          echo "Stopping all docker services from ${COMPOSE_FILE}..."
          docker-compose -f "$COMPOSE_FILE" down --volumes --remove-orphans --timeout 30 || echo "docker-compose down failed, continuing cleanup..."